<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<# 
	var EntityName = "Element"; 
	var KeyTypeName = "Guid";
	var DbContextName = "BaseIdentityDbContext";
	var otherRepository = new System.Collections.Generic.List<string[]>()
	{
	    new string[]{"ElementTree","Guid","elementTree"}
	};	
	var ApiNamespace = "Yu.Service"; 
#>

using System;
using System.Threading.Tasks;
using Yu.Data.Entities;
using Yu.Data.Entities.Right;
using Yu.Data.Infrasturctures;
using Yu.Data.Repositories;

namespace <#=ApiNamespace#>
{
    public class <#=EntityName#>Service : I<#=EntityName#>Service
    {

	    // 仓储类
        private IRepository<<#=EntityName#>, <#=KeyTypeName#>> _repository;
		<# for(int i= 0; i< otherRepository.Count; i++){ #>		
	    // 仓储类
		private IRepository<<#=otherRepository[i][0]#>, <#=otherRepository[i][1]#>> _<#=otherRepository[i][2]#>Repository;			 
		<# }#>

        // 工作单元
        private readonly IUnitOfWork<<#=DbContextName#>> _unitOfWork;


        public <#=EntityName#>Service(IRepository<<#=EntityName#>, Guid> repository, <# for(int i= 0; i< otherRepository.Count; i++){ #>		
					IRepository<<#=otherRepository[i][0]#>, <#=otherRepository[i][1]#>> <#=otherRepository[i][2]#>Repository, 		 
					<# }#>IUnitOfWork<BaseIdentityDbContext> unitOfWork)
        {
            _repository = repository;<# for(int i= 0; i< otherRepository.Count; i++){ #>		
			_<#=otherRepository[i][2]#>Repository =  <#=otherRepository[i][2]#>Repository;	 
			<# }#>_unitOfWork = unitOfWork;
        }

		/// <summary>
        /// 添加数据
        /// </summary>
        public async Task Add<#=EntityName#>Async(<#=EntityName#> entity)
        {
            await _repository.InsertAsync(entity);
            await _unitOfWork.CommitAsync();
        }

        /// <summary>
        /// 删除数据
        /// </summary>
        public async Task Delete<#=EntityName#>Async(<#=KeyTypeName#> id)
        {
            _repository.DeleteRange(e => e.Id == id);
            await _unitOfWork.CommitAsync();
        }

        /// <summary>
        /// 取得数据
        /// </summary>
        /// <param name="pageIndex">页码</param>
        /// <param name="pageSize">页面大小</param>
        public PagedData<<#=EntityName#>> Get<#=EntityName#>s(int pageIndex, int pageSize, string searchText = "")
        {
            // 查询过滤
            var query = _repository.GetAllNoTracking();

            // 生成结果
            return _repository.GetByPage(query, pageIndex, pageSize);
        }

        /// <summary>
        /// 更新数据
        /// </summary>
        public async Task Update<#=EntityName#>Async(<#=EntityName#> entity)
        {
            _repository.Update(entity);
            await _unitOfWork.CommitAsync();
        }
	}
}